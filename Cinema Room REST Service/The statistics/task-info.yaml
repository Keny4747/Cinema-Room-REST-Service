type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Seat {
        private Integer row;
        private Integer Column;
        private Integer price;

    }
  learner_created: true
- name: src/cinema/model/Room.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.List;

    public class Room {
        @JsonProperty("total_rows")
        private Integer totalRows;

        @JsonProperty("total_columns")
        private Integer totalColumns;

        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        public Room() {

        }

        public Integer getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(Integer totalRows) {
            this.totalRows = totalRows;
        }

        public Integer getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(Integer totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/model/dto/TicketDTO.java
  visible: true
  text: |
    package cinema.model.dto;

    import lombok.Data;

    @Data
    public class TicketDTO {
        private int row;
        private int column;
        private int price;
    }
  learner_created: true
- name: src/cinema/model/ReturnTicket.java
  visible: true
  text: |
    package cinema.model;

    import cinema.model.dto.TicketDTO;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor
    public class ReturnTicket {
        @JsonProperty("returned_ticket")
        private TicketDTO returnTicket;
    }
  learner_created: true
- name: src/cinema/config/RestExceptionHandler.java
  visible: true
  text: |
    package cinema.config;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.RestControllerAdvice;

    import java.io.NotActiveException;

    @RestControllerAdvice
    public class RestExceptionHandler {

        @ExceptionHandler(IndexOutOfBoundsException.class)
        public ResponseEntity<ErrorDTO> handlerIndexOfBoundException(){
            ErrorDTO error = ErrorDTO.builder()
                    .error("The number of a row or a column is out of bounds!")
                    .build();
            return new ResponseEntity<>(error,HttpStatus.BAD_REQUEST);
        }
        @ExceptionHandler(RuntimeException.class)
        public ResponseEntity<ErrorDTO> handlerSeatAvailableException(){
            ErrorDTO error = ErrorDTO.builder()
                    .error("The ticket has been already purchased!")
                    .build();
            return new ResponseEntity<>(error,HttpStatus.BAD_REQUEST);
        }
        @ExceptionHandler(ArrayIndexOutOfBoundsException.class)
        public ResponseEntity<ErrorDTO> handlerNoTicketException(){
            ErrorDTO error = ErrorDTO.builder()
                    .error("Wrong token!")
                    .build();
            return new ResponseEntity<>(error,HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/config/ErrorDTO.java
  visible: true
  text: |
    package cinema.config;

    import lombok.Builder;
    import lombok.Data;

    @Data
    @Builder
    public class ErrorDTO {
        private String error;

    }
  learner_created: true
- name: src/cinema/model/dto/SeatDTO.java
  visible: true
  text: |
    package cinema.model.dto;

    import lombok.Data;

    @Data
    public class SeatDTO {
        private Integer row;
        private Integer Column;
    }
  learner_created: true
- name: src/cinema/service/TicketService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Seat;
    import cinema.model.Ticket;
    import cinema.model.Token;

    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;

    @Service
    public class TicketService {

        List<Ticket> tickets;

        public TicketService() {
            this.tickets = new ArrayList<>();
        }

        public Ticket addticket(Seat seat) {
            Ticket ticket = new Ticket(generateUUID(), seat);
            tickets.add(ticket);
            return ticket;
        }

        public Ticket findTicket(Token token) {
            return tickets.stream()
                    .filter(x -> x.getToken().equals(token.getToken()))
                    .findFirst()
                    .orElse(null);
        }
        public void removeTicket(Ticket ticket){
            tickets.remove(ticket);
        }

        public String generateUUID() {
            return UUID.randomUUID().toString();
        }
    }
  learner_created: true
- name: src/cinema/config/exceptions/NoTicketException.java
  visible: true
  text: |
    package cinema.config.exceptions;

    import lombok.AllArgsConstructor;
    import lombok.NoArgsConstructor;

    @NoArgsConstructor
    public class NoTicketException extends Exception{

    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.*;
    import cinema.model.dto.SeatDTO;
    import cinema.model.dto.TicketDTO;
    import cinema.service.RoomService;
    import cinema.service.TicketService;
    import org.springframework.web.bind.annotation.*;


    @RestController
    public class CinemaController {

        Room room = new Room();

        final RoomService service;
        final TicketService ticketService;

        public CinemaController(RoomService service, TicketService ticketService) {
            this.service = service;
            this.ticketService = ticketService;
        }

        @GetMapping("/seats")
        Room getSeats() {

            room.setAvailableSeats(service.findAll());
            room.setTotalColumns(service.TOTALCOLUMNS);
            room.setTotalRows(service.TOTALROWS);
            return room;
        }

        @PostMapping("/purchase")
        Ticket purchase(@RequestBody SeatDTO seatDTO) {
            Seat seat;
            Ticket ticket;
            if (service.validateIndex(seatDTO)) {
                throw new IndexOutOfBoundsException();
            }
            if (service.findAvailableSeat(seatDTO) == null) {
                throw new RuntimeException();
            } else {
                seat = service.findAvailableSeat(seatDTO);
                ticket = ticketService.addticket(seat);
                service.deleteSeat(seat);

            }

            return ticket;
        }

        @PostMapping("/return")
        ReturnTicket returnTicket(@RequestBody Token token) {
            Ticket ticket = ticketService.findTicket(token);

            if (ticket == null) {
                throw new ArrayIndexOutOfBoundsException();
            }

            TicketDTO ticketDTO = new TicketDTO();
            ticketDTO.setPrice(ticket.getTicket().getPrice());
            ticketDTO.setColumn(ticket.getTicket().getColumn());
            ticketDTO.setRow(ticket.getTicket().getRow());
            ticketService.removeTicket(ticket);
            service.addSeat(ticketDTO);

            return new ReturnTicket(ticketDTO);
        }

    }
  learner_created: true
- name: src/cinema/service/RoomService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Seat;
    import cinema.model.dto.SeatDTO;
    import cinema.model.dto.TicketDTO;
    import org.modelmapper.ModelMapper;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;
    @Service
    public class RoomService {
        private final List<Seat> seats;
        public final Integer TOTALCOLUMNS = 9;
        public final Integer TOTALROWS = 9;

        public RoomService() {
            this.seats = new ArrayList<>();
            initFillAvailableSeats();
        }



        public List<Seat> findAll() {
            return seats;
        }
        public void deleteSeat(Seat seat){
            seats.remove(seat);
        }
        public void addSeat(TicketDTO ticketDTO){
            Seat seat = new ModelMapper().map(ticketDTO,Seat.class);
            seats.add(seat);
        }

        void initFillAvailableSeats() {

            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    //<=3 porque estamos agregando el i+1
                    Integer price = i <= 3 ? 10 : 8;
                    this.seats.add(new Seat(i + 1, j + 1, price));
                }
            }
        }

        public Seat findAvailableSeat(SeatDTO seatDTO) {
            return   seats.stream()
                    .filter(x -> x.getColumn().equals(seatDTO.getColumn()) && x.getRow().equals(seatDTO.getRow()))
                    .findFirst()
                    .orElse(null);
        }

        public boolean validateIndex(SeatDTO seatDTO) {
            return seatDTO.getColumn() > TOTALCOLUMNS
                    || seatDTO.getColumn() < 0
                    || seatDTO.getRow() > TOTALROWS
                    || seatDTO.getRow() < 0;
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    import lombok.AllArgsConstructor;
    import lombok.Data;

    @Data
    @AllArgsConstructor

    public class Ticket {
        private String token;
        private Seat ticket;

    }
  learner_created: true
- name: src/cinema/model/Token.java
  visible: true
  text: |
    package cinema.model;

    import lombok.Data;

    import java.util.UUID;

    @Data
    public class Token {
        private String token;

    }
  learner_created: true
- name: src/cinema/config/AppConfig.java
  visible: true
  learner_created: true
- name: src/cinema/model/Statics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Unchecked
record: -1
